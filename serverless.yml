# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kjpersonal
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: orsa
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orsa-admin-backend

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-3
  stage: ${opt:stage, 'dev'}
  profile: orsa
  httpApi:
    cors:
      allowedOrigins:
        - "https://orsa-admin.vercel.app"
        - "http://localhost:3000" # For local development
      allowedHeaders:
        - Content-Type # Essential for JSON requests
        - Authorization # For authentication tokens
        - X-Requested-With # Common for AJAX/fetch requests
        - X-Api-Key # If you plan to use API keys
        - Accept # For content negotiation
        - X-Filename # For binary uploads with filename
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
      # exposedHeaders:
      #   - X-Total-Count # For pagination in your product/order lists
      #   - X-Rate-Limit # If you implement rate limiting
      #   - Content-Range # For range queries
      maxAge: 86400 # 24 hours
    # Enable binary media types for image uploads
    payload: "2.0"
    disableDefaultEndpoint: false

  # VPC Configuration to access private RDS database
  # You need to update these with your actual VPC, subnet, and security group IDs
  vpc:
    securityGroupIds:
      - sg-06745c25a3b52833b # Replace with your RDS security group ID    
    subnetIds:
      - subnet-0c6d5836c444e066b # Replace with private subnet IDs
      - subnet-028206bbed10db409
      - subnet-0092491643bdfa079

  # Configure environment variables (these will be available in Lambda)
  # Note: We're using hardcoded values for now. In production, use secure ways to handle credentials
  # such as AWS Systems Manager Parameter Store or AWS Secrets Manager
  environment:
    # Update these values with your actual database information
    DB_HOST: "orsa-ecommerce.cjkwgkcwoyr0.eu-west-3.rds.amazonaws.com" # UPDATE THIS
    DB_USER: "admin" # UPDATE THIS if different
    DB_PASSWORD: "[[E<fWsd0CK02s6O-b)>tjxi3Fnp" # Reference to Systems Manager Parameter Store
    DB_NAME: "Orsa"
    DB_PORT: "3306"
    # S3 bucket for product images
    S3_BUCKET_NAME: "${self:service}-product-images-${self:provider.stage}"
    S3_REGION: "${self:provider.region}"

    DB_SECRET_ID: "rds!db-9a50aa73-8600-4fd7-ac67-596f2d27da20"  # IAM role permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: "arn:aws:secretsmanager:eu-west-3:*:secret:rds!db-9a50aa73-8600-4fd7-ac67-596f2d27da20*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:eu-west-3:*:*"
        # Allow Lambda to access VPC resources (RDS)
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: "*" # Allow Lambda to access S3 for product images
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:GetObject
          Resource: "arn:aws:s3:::${self:service}-product-images-${self:provider.stage}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:service}-product-images-${self:provider.stage}"

# Package configuration
package:
  individually: true
  patterns:
    - "!node_modules/.cache/**"
    - "!.env"
    - "!.git/**"

# Custom configurations if needed
custom:
  timeout: 30 # Default timeout for all functions (30 seconds)

functions:
  # Test function to debug connectivity and permissions
  testDbConnection:
    handler: handler.testDbConnection
    events:
      - httpApi:
          path: /test-connection
          method: get
    timeout: 60 # Longer timeout for debugging
    
  # Test function for Secrets Manager
  testSecretsManager:
    handler: handler.testSecretsManager
    events:
      - httpApi:
          path: /test-secrets
          method: get
    timeout: 30
  # Product endpoints
  getProducts:
    handler: handler.getProducts
    events:
      - httpApi:
          path: /products
          method: get
      - httpApi:
          path: /products/{id}
          method: get
    timeout: ${self:custom.timeout}

  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          path: /products
          method: post
    timeout: ${self:custom.timeout}

  updateProduct:
    handler: handler.updateProduct
    events:
      - httpApi:
          path: /products/{id}
          method: put
    timeout: ${self:custom.timeout}

  deleteProduct:
    handler: handler.deleteProduct
    events:
      - httpApi:
          path: /products/{id}
          method: delete
    timeout: ${self:custom.timeout}

  # User endpoints
  getUsers:
    handler: handler.getUsers
    events:
      - httpApi:
          path: /users
          method: get
      - httpApi:
          path: /users/{id}
          method: get
    timeout: ${self:custom.timeout}

  createUser:
    handler: handler.createUser
    events:
      - httpApi:
          path: /users
          method: post
    timeout: ${self:custom.timeout}

  updateUser:
    handler: handler.updateUser
    events:
      - httpApi:
          path: /users/{id}
          method: put
    timeout: ${self:custom.timeout}

  deleteUser:
    handler: handler.deleteUser
    events:
      - httpApi:
          path: /users/{id}
          method: delete
    timeout: ${self:custom.timeout}

  # Order endpoints
  getOrders:
    handler: handler.getOrders
    events:
      - httpApi:
          path: /orders
          method: get
      - httpApi:
          path: /orders/{id}
          method: get
    timeout: ${self:custom.timeout}

  createOrder:
    handler: handler.createOrder
    events:
      - httpApi:
          path: /orders
          method: post
    timeout: ${self:custom.timeout}

  updateOrder:
    handler: handler.updateOrder
    events:
      - httpApi:
          path: /orders/{id}
          method: put
    timeout: ${self:custom.timeout}

  deleteOrder:
    handler: handler.deleteOrder
    events:
      - httpApi:
          path: /orders/{id}
          method: delete
    timeout: ${self:custom.timeout}

  getTotalPrice:
    handler: handler.getTotalPrice
    events:
      - httpApi:
          path: /orders/total-price
          method: get
    timeout: ${self:custom.timeout}

  # Order item endpoints
  addOrderItem:
    handler: handler.addOrderItem
    events:
      - httpApi:
          path: /orders/{id}/items
          method: post
    timeout: ${self:custom.timeout}
  removeOrderItem:
    handler: handler.removeOrderItem
    events:
      - httpApi:
          path: /orders/items/{itemId}
          method: delete
    timeout: ${self:custom.timeout} # Product Image endpoints
  uploadProductImage:
    handler: handler.uploadProductImage
    events:
      - httpApi:
          path: /products/images/upload
          method: post
    timeout: 60 # Longer timeout for file uploads
  deleteProductImage:
    handler: handler.deleteProductImage
    events:
      - httpApi:
          path: /products/images/{imageKey}
          method: delete
    timeout: ${self:custom.timeout}

  # API Documentation endpoint
  getApiDocumentation:
    handler: handler.getApiDocumentation
    events:
      - httpApi:
          path: /api/docs
          method: get
    timeout: ${self:custom.timeout}

# AWS Resources
resources:
  Resources: # S3 Bucket for Product Images
    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-product-images-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true # Block ACLs since we use bucket policy
          BlockPublicPolicy: false # Allow bucket policy for public read
          IgnorePublicAcls: true # Ignore existing ACLs
          RestrictPublicBuckets: false # Allow bucket policy
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ["*"]
              MaxAge: 3000

    # Bucket Policy for Public Read Access
    ProductImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductImagesBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "${ProductImagesBucket.Arn}/*"

  Outputs:
    ProductImagesBucketName:
      Description: "Name of the S3 bucket for product images"
      Value: !Ref ProductImagesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-ProductImagesBucket

    ProductImagesBucketUrl:
      Description: "Public URL of the S3 bucket for product images"
      Value: !Sub "https://${ProductImagesBucket}.s3.${self:provider.region}.amazonaws.com"
      Export:
        Name: ${self:service}-${self:provider.stage}-ProductImagesBucketUrl
